// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aura/bridge/source/v1/events.proto

package source

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BridgeInitiated struct {
	User    string                                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Nonce   uint64                                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Chain   uint64                                 `protobuf:"varint,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Version string                                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *BridgeInitiated) Reset()         { *m = BridgeInitiated{} }
func (m *BridgeInitiated) String() string { return proto.CompactTextString(m) }
func (*BridgeInitiated) ProtoMessage()    {}
func (*BridgeInitiated) Descriptor() ([]byte, []int) {
	return fileDescriptor_766d11635f540f1b, []int{0}
}
func (m *BridgeInitiated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeInitiated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeInitiated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeInitiated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeInitiated.Merge(m, src)
}
func (m *BridgeInitiated) XXX_Size() int {
	return m.Size()
}
func (m *BridgeInitiated) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeInitiated.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeInitiated proto.InternalMessageInfo

func (m *BridgeInitiated) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BridgeInitiated) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BridgeInitiated) GetChain() uint64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *BridgeInitiated) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*BridgeInitiated)(nil), "aura.bridge.source.v1.BridgeInitiated")
}

func init() {
	proto.RegisterFile("aura/bridge/source/v1/events.proto", fileDescriptor_766d11635f540f1b)
}

var fileDescriptor_766d11635f540f1b = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0x63, 0x68, 0x8b, 0xf0, 0x82, 0x64, 0x15, 0xc9, 0x62, 0x70, 0xab, 0x0e, 0xa8, 0x4b,
	0x6d, 0x55, 0x0c, 0xec, 0x19, 0x90, 0x3a, 0x92, 0x91, 0xcd, 0x49, 0xac, 0xd4, 0x82, 0xf8, 0xaf,
	0x6c, 0x27, 0x82, 0xb7, 0xe0, 0x5d, 0x78, 0x89, 0x8e, 0x1d, 0x11, 0x43, 0x85, 0x92, 0x17, 0x41,
	0xb1, 0x8b, 0x04, 0xd3, 0x7f, 0x77, 0xfe, 0x7c, 0xc3, 0xe1, 0x85, 0x6c, 0xac, 0x14, 0xb9, 0xd5,
	0x65, 0xa5, 0x84, 0x83, 0xc6, 0x16, 0x4a, 0xb4, 0x6b, 0xa1, 0x5a, 0x65, 0xbc, 0xe3, 0x3b, 0x0b,
	0x1e, 0xc8, 0xf5, 0xc0, 0xf0, 0xc8, 0xf0, 0xc8, 0xf0, 0x76, 0x7d, 0x33, 0xad, 0xa0, 0x82, 0x40,
	0x88, 0x41, 0x45, 0x78, 0xf1, 0x81, 0xf0, 0x55, 0x1a, 0xd0, 0x8d, 0xd1, 0x5e, 0x4b, 0xaf, 0x4a,
	0x42, 0xf0, 0xa8, 0x71, 0xca, 0x52, 0x34, 0x47, 0xcb, 0xcb, 0x2c, 0x68, 0x32, 0xc5, 0x63, 0x03,
	0xa6, 0x50, 0xf4, 0x6c, 0x8e, 0x96, 0xa3, 0x2c, 0x9a, 0x21, 0x2d, 0xb6, 0x52, 0x1b, 0x7a, 0x1e,
	0xd3, 0x60, 0x08, 0xc5, 0x17, 0xad, 0xb2, 0x4e, 0x83, 0xa1, 0xa3, 0x50, 0xf1, 0x6b, 0xc9, 0x03,
	0x9e, 0xc8, 0x1a, 0x1a, 0xe3, 0xe9, 0x78, 0x78, 0x48, 0xf9, 0xfe, 0x38, 0x4b, 0xbe, 0x8e, 0xb3,
	0xdb, 0x4a, 0xfb, 0x6d, 0x93, 0xf3, 0x02, 0x6a, 0x51, 0x80, 0xab, 0xc1, 0x9d, 0xce, 0xca, 0x95,
	0xcf, 0xc2, 0xbf, 0xed, 0x94, 0xe3, 0x1b, 0xe3, 0xb3, 0xd3, 0xef, 0xf4, 0x71, 0xdf, 0x31, 0x74,
	0xe8, 0x18, 0xfa, 0xee, 0x18, 0x7a, 0xef, 0x59, 0x72, 0xe8, 0x59, 0xf2, 0xd9, 0xb3, 0xe4, 0xe9,
	0xfe, 0x4f, 0x93, 0x81, 0xfc, 0x45, 0xad, 0xa4, 0x73, 0xca, 0x3b, 0x11, 0x86, 0x7b, 0x8d, 0x27,
	0x14, 0xfe, 0x5f, 0x31, 0x9f, 0x84, 0x3d, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x64, 0x32,
	0x78, 0xd7, 0x62, 0x01, 0x00, 0x00,
}

func (m *BridgeInitiated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeInitiated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeInitiated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if m.Chain != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeInitiated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	if m.Chain != 0 {
		n += 1 + sovEvents(uint64(m.Chain))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BridgeInitiated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeInitiated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeInitiated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
